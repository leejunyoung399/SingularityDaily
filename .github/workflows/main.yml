name: Auto-collect and Deploy Site

on:
  push:
    branches:
      - main
  schedule:
    # 3시간마다 실행 (UTC 기준)
    - cron: '0 */3 * * *'
  workflow_dispatch: # GitHub Actions 탭에서 수동 실행을 위한 옵션

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20 # 20분 이상 실행되면 작업을 강제로 중단합니다.
    permissions:
      contents: write # repository에 commit/push하기 위한 권한
      pages: write      # GitHub Pages에 배포하기 위한 권한
      id-token: write   # 배포 작업 인증을 위한 권한

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # git-auto-commit-action이 전체 히스토리를 필요로 합니다.

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create credentials from secrets
        # GitHub Secrets에 저장된 인증 정보를 파일로 생성합니다.
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CREDENTIALS_JSON: ${{ secrets.CREDENTIALS_JSON }}
          TOKEN_JSON: ${{ secrets.TOKEN_JSON }}
        run: |
          if [ -z "${GOOGLE_API_KEY}" ] || [ -z "${CREDENTIALS_JSON}" ] || [ -z "${TOKEN_JSON}" ]; then
            echo "Error: One or more required secrets (GOOGLE_API_KEY, CREDENTIALS_JSON, TOKEN_JSON) are not set." >&2
            exit 1
          fi
          echo "GOOGLE_API_KEY=${GOOGLE_API_KEY}" > .env
          printf '%s' "${CREDENTIALS_JSON}" > credentials.json
          printf '%s' "${TOKEN_JSON}" > token.json

          echo "--- Verifying token.json content ---"
          cat token.json
          echo
          echo "--- End of token.json content ---"

      - name: Run data collection and generate nav
        run: |
          python -m scripts.collect_from_gmail
          python -m scripts.process_scholar_email
          python -m scripts.generate_nav

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "chore: Auto-update collected content"
          file_pattern: "docs/**/*.md mkdocs.yml seen_scholar_messages.json"

      - name: Deploy to GitHub Pages
        # 'mkdocs gh-deploy' 대신 공식 GitHub Actions를 사용하여 안정성을 높입니다.
        # 먼저 사이트를 빌드합니다.
        run: mkdocs build

      - name: Upload artifact
        # 빌드된 사이트(./site 폴더)를 아티팩트로 업로드합니다.
        uses: actions/upload-pages-artifact@v3
        with:
          path: './site'

      - name: Deploy to GitHub Pages from artifact
        # 업로드된 아티팩트를 사용하여 GitHub Pages에 배포합니다.
        id: deployment
        uses: actions/deploy-pages@v4